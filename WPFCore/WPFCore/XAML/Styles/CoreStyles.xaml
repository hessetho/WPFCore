<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:WPFCore.XAML.Converter"
                    xmlns:controls="clr-namespace:WPFCore.XAML.Controls">

    <!-- Window-Style ================================================= -->

    <LinearGradientBrush x:Key="WindowBackground"
                             StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FFFFFFFF"/>
        <GradientStop Offset="1" Color="#FFFDFDFD"/>
    </LinearGradientBrush>

    <Style TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{StaticResource WindowBackground}"/>
    </Style>
    
    <!-- Standardfarbe für Border.BorderColor ========================= -->
    <Color x:Key="BorderColor">#CDDAEA</Color>
    <SolidColorBrush x:Key="BorderBrush" Color="{StaticResource BorderColor}"/>

    <Style TargetType="{x:Type Border}" x:Key="DefaultBorder">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
    </Style>

    <!-- Themen-Überschrift: Farben, Border-Style und Textdarstellung -->
    <LinearGradientBrush x:Key="TopicBackground"
                             StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FDFEFF"/>
        <GradientStop Offset="0.5" Color="#E6F0FA"/>
        <GradientStop Offset="0.5" Color="#DCE6F4"/>
        <GradientStop Offset="1" Color="#E4EFFB"/>
    </LinearGradientBrush>

    <Style TargetType="{x:Type Border}" x:Key="TopicBorder">
        <Setter Property="Background" Value="{StaticResource TopicBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <!-- Fußzeile: Farben, Border-Style und Textdarstellung -->
    <LinearGradientBrush x:Key="FooterBackground" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Color="#E8EEF7" Offset="0"/>
        <GradientStop Color="#F1F5F8" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="FooterLabelForeground" Color="#6C6C6C"/>

    <Style TargetType="Label" x:Key="HighlightLabel">
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="FontFamily" Value="Calibri"/>
    </Style>

    <!-- Farben für ListBox und TreeViewItems ========================= -->
    <SolidColorBrush x:Key="HoverBorderBrush_Outer" Color="#B8D6FB"/>
    <SolidColorBrush x:Key="HoverBorderBrush_Inner" Color="#FCFDFE"/>
    <LinearGradientBrush x:Key="HoverBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FAFBFD"/>
        <GradientStop Offset="1" Color="#EBF3FD"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="SelectedBorderBrush_Outer" Color="#7DA2CE"/>
    <SolidColorBrush x:Key="SelectedBorderBrush_Inner" Color="#EBF3FD"/>
    <SolidColorBrush x:Key="SelectedForegroundBrush" Color="Black"/>
    <LinearGradientBrush x:Key="SelectedBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#DCEBFC"/>
        <GradientStop Offset="1" Color="#C1D8FC"/>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="AlternatingRowBackground" Color="#FFE8F2FF"/>

    <!-- Definition einer Button-Leiste als Menü ========================== -->
    <LinearGradientBrush x:Key="MenuBackground"
                         StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FDFEFF"/>
        <GradientStop Offset="0.5" Color="#E6F0FA"/>
        <GradientStop Offset="0.5" Color="#DCE6F4"/>
        <GradientStop Offset="1" Color="#DFE9F5"/>
    </LinearGradientBrush>

    <Style TargetType="Border" x:Key="MenuBorder">
        <Setter Property="Background" Value="{StaticResource MenuBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource BorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <!--<Setter Property="CornerRadius" Value="3,3,0,0"/>-->
    </Style>

    <LinearGradientBrush x:Key="ChromeBackground" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Color="#FFF3F3F3" Offset="0"/>
            <GradientStop Color="#FFEBEBEB" Offset="0.5"/>
            <GradientStop Color="#FFDDDDDD" Offset="0.5"/>
            <GradientStop Color="#FFCDCDCD" Offset="1"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <!-- Border ======================================================= -->

    <Style TargetType="{x:Type Border}" x:Key="FooterBorder">
        <Setter Property="Background" Value="{StaticResource FooterBackground}"/>
        <Setter Property="BorderBrush" Value="#DFDFDF"/>
        <Setter Property="BorderThickness" Value="0,1,0,0"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="MinHeight" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
    </Style>

    <Style TargetType="{x:Type Border}" x:Key="TooltipBorder">
        <Setter Property="BorderBrush" Value="#767676"/>
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="2" />
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Border.Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <GradientStop Offset="0" Color="#FFFFFF"/>
                    <GradientStop Offset="1" Color="#E4E5F0"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Border.Effect">
            <Setter.Value>
                <DropShadowEffect BlurRadius="15" ShadowDepth="5" Direction="315" Opacity="0.5"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TextBlock ==================================================== -->

    <Style x:Key="HeaderText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <!-- Button ======================================================= -->
    
    <Style TargetType="Button" x:Key="MenuButton">
        <Style.Resources>
            <SolidColorBrush x:Key="HighlightOuterBorder" Color="#FFBBCADB"/>
            <SolidColorBrush x:Key="HighlightInnerBorder" Color="#FFFDFEFF"/>
            <SolidColorBrush x:Key="HighlightBackground" Color="#20FFFFFF"/>

            <SolidColorBrush x:Key="PressedOuterBorder" Color="#FFBBCADB"/>
            <SolidColorBrush x:Key="PressedInnerBorder" Color="#20000000"/>
            <SolidColorBrush x:Key="PressedBackground" Color="#20E0E0E0"/>
        </Style.Resources>

        <Setter Property="Margin" Value="10,0"/>
        <Setter Property="Padding" Value="10,0"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="OuterBorder"
                                BorderThickness="1" SnapsToDevicePixels="True"
                                CornerRadius="3">
                        <Border x:Name="InnerBorder"
                                Background="Transparent"
                                BorderThickness="1" SnapsToDevicePixels="True"
                                CornerRadius="2">
                            <ContentPresenter RecognizesAccessKey="True" 
                                              Content="{TemplateBinding ContentControl.Content}" 
                                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                              Margin="{TemplateBinding Control.Padding}" 
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource HighlightOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource HighlightInnerBorder}"/>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource HighlightBackground}"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource HighlightOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource HighlightInnerBorder}"/>
                            <!--<Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource HighlightBackground}"/>-->
                        </Trigger>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource PressedOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource PressedInnerBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderThickness" Value="0,1,0,0"/>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource PressedBackground}"/>
                            <Setter TargetName="InnerBorder" Property="Padding" Value="1,1,0,0"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsEnabled" Value="False">
                            <Setter TargetName="InnerBorder" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToggleButton" x:Key="MenuToggleButton">
        <Style.Resources>
            <SolidColorBrush x:Key="HighlightOuterBorder" Color="#FFBBCADB"/>
            <SolidColorBrush x:Key="HighlightInnerBorder" Color="#FFFDFEFF"/>
            <SolidColorBrush x:Key="HighlightBackground" Color="#20FFFFFF"/>

            <SolidColorBrush x:Key="PressedOuterBorder" Color="#FFBBCADB"/>
            <SolidColorBrush x:Key="PressedInnerBorder" Color="#20000000"/>
            <SolidColorBrush x:Key="PressedBackground" Color="#20E0E0E0"/>
        </Style.Resources>

        <Setter Property="Margin" Value="10,0"/>
        <Setter Property="Padding" Value="10,0"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border x:Name="OuterBorder"
                            BorderBrush="{StaticResource HighlightOuterBorder}"
                                BorderThickness="1" SnapsToDevicePixels="True"
                                CornerRadius="3">
                        <Border x:Name="InnerBorder"
                                Background="Transparent"
                                BorderThickness="1" SnapsToDevicePixels="True"
                                CornerRadius="2">
                            <ContentPresenter RecognizesAccessKey="True" 
                                              Content="{TemplateBinding ContentControl.Content}" 
                                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                              Margin="{TemplateBinding Control.Padding}" 
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource HighlightOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource HighlightInnerBorder}"/>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource HighlightBackground}"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource HighlightOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource HighlightInnerBorder}"/>
                            <!--<Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource HighlightBackground}"/>-->
                        </Trigger>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource PressedOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource PressedInnerBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderThickness" Value="0,1,0,0"/>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource PressedBackground}"/>
                            <Setter TargetName="InnerBorder" Property="Padding" Value="1,1,0,0"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsEnabled" Value="False">
                            <Setter TargetName="InnerBorder" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="GrayButton">
        <Style.Resources>
            <SolidColorBrush x:Key="HighlightOuterBorder" Color="#3C7FB1"/>
            <SolidColorBrush x:Key="HighlightInnerBorder" Color="#FAFDFE"/>
            <LinearGradientBrush x:Key="HighlightBackground" StartPoint="0,0" EndPoint="0,1">
                <GradientStop Offset="0" Color="#EAF6FD"/>
                <GradientStop Offset="0.5" Color="#D9F0FC"/>
                <GradientStop Offset="0.51" Color="#BEE6FD"/>
                <GradientStop Offset="1" Color="#A7D9F5"/>
            </LinearGradientBrush>

            <SolidColorBrush x:Key="PressedOuterBorder" Color="#FFBBCADB"/>
            <SolidColorBrush x:Key="PressedInnerBorder" Color="#20000000"/>
            <SolidColorBrush x:Key="PressedBackground" Color="#20E0E0E0"/>
            <SolidColorBrush x:Key="DisabledBackground" Color="#20E0E0E0"/>
        </Style.Resources>

        <Setter Property="Padding" Value="2"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="OuterBorder"
                            BorderBrush="#707070"
                            BorderThickness="1" SnapsToDevicePixels="True"
                            CornerRadius="3">
                        <Border x:Name="InnerBorder"
                                BorderBrush="#FCFCFC"
                                BorderThickness="1" SnapsToDevicePixels="True"
                                CornerRadius="2">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="0" Color="#01020202"/>
                                    <GradientStop Offset="0.5" Color="#04000000"/>
                                    <GradientStop Offset="0.51" Color="#14000000"/>
                                    <GradientStop Offset="1" Color="#23000000"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <ContentPresenter RecognizesAccessKey="True" 
                                              Content="{TemplateBinding ContentControl.Content}" 
                                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                              Margin="{TemplateBinding Control.Padding}" 
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsMouseOver" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource HighlightOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource HighlightInnerBorder}"/>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource HighlightBackground}"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsFocused" Value="True">
                            <Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource HighlightOuterBorder}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource HighlightInnerBorder}"/>
                            <!--<Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource HighlightBackground}"/>-->
                        </Trigger>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <!--<Setter TargetName="OuterBorder" Property="BorderBrush" Value="{StaticResource PressedOuterBorder}"/>-->
                            <Setter TargetName="OuterBorder" Property="Background" Value="{StaticResource HighlightBackground}"/>
                            <!--<Setter TargetName="InnerBorder" Property="BorderBrush" Value="{StaticResource PressedInnerBorder}"/>-->
                            <Setter TargetName="InnerBorder" Property="BorderThickness" Value="0,1,0,0"/>
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource PressedBackground}"/>
                            <Setter TargetName="InnerBorder" Property="Padding" Value="1,1,0,0"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsEnabled" Value="False">
                            <Setter TargetName="InnerBorder" Property="Background" Value="{StaticResource DisabledBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" x:Key="GrayDialogButton" BasedOn="{StaticResource GrayButton}">
        <Setter Property="Padding" Value="15,3"/>
        <Setter Property="Margin" Value="5"/>
    </Style>

    <Style TargetType="Button" x:Key="fadingButton">
        <Setter Property="Opacity" Value="0.25"/>
        <Style.Triggers>
            <EventTrigger RoutedEvent="ButtonBase.MouseEnter">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="1"
                                             Duration="00:00:00.5"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
            <EventTrigger RoutedEvent="ButtonBase.MouseLeave">
                <EventTrigger.Actions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                             To="0.25"
                                             Duration="00:00:00.5"/>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger.Actions>
            </EventTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button" x:Key="RemoveButton">
        <Setter Property="Width" Value="18"/>
        <Setter Property="Height" Value="18"/>
        <Setter Property="Margin" Value="1"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Outer"
                            BorderBrush="LightGray" BorderThickness="1"
                            Background="White"
                            CornerRadius="4">
                        <Image Source="/WPFCore;component/Icons/Kreuz_16x16.png"
                               Stretch="None"
                               />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="ButtonBase.IsMouseOver" Value="True">
                            <Setter TargetName="Outer" Property="BorderBrush" Value="Gray"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsFocused" Value="True">
                        </Trigger>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter TargetName="Outer" Property="Margin" Value="1,1,0,0"/>
                        </Trigger>

                        <Trigger Property="ButtonBase.IsEnabled" Value="False">
                            <Setter TargetName="Outer" Property="Opacity" Value="0.3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- ListBoxItem ================================================== -->

    <Style TargetType="{x:Type ListBoxItem}" x:Key="AlternateListBoxItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border Name="Border" 
                            BorderThickness="1" CornerRadius="3"
                            SnapsToDevicePixels="True">
                        <Border Name="InnerBorder" 
                                BorderThickness="1" CornerRadius="2"
                                SnapsToDevicePixels="True"
                                Padding="1">
                            <ContentPresenter />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" 
                                    Value="{StaticResource HoverBorderBrush_Outer}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" 
                                    Value="{StaticResource HoverBorderBrush_Inner}"/>
                            <Setter TargetName="InnerBorder" Property="Background" 
                                    Value="{StaticResource HoverBackgroundBrush}"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="InnerBorder" Property="Background" 
                                    Value="{StaticResource SelectedBackgroundBrush}"/>
                            <Setter TargetName="InnerBorder" Property="TextBlock.Foreground" 
                                    Value="{StaticResource SelectedForegroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" 
                                    Value="{StaticResource SelectedBorderBrush_Outer}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" 
                                    Value="{StaticResource SelectedBorderBrush_Inner}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This style will always highlight the selected list box item -->
    <Style TargetType="ListBoxItem" x:Key="HighlightedListBoxItem">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="2"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border Name="Border" 
                            Padding="2" 
                            SnapsToDevicePixels="true"
                            Background="White">
                        <ContentPresenter/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ListBoxItem}" x:Key="StretchedContainerStyle" >
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
    </Style>

    <!-- ListViewItem ================================================== -->

    <Style TargetType="{x:Type ListViewItem}" x:Key="DefaultListViewItem">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Border Name="Border" 
                            BorderThickness="1" CornerRadius="3"
                            SnapsToDevicePixels="True">
                        <Border Name="InnerBorder" 
                                BorderThickness="1" CornerRadius="2"
                                SnapsToDevicePixels="True"
                                Padding="1">
                            <GridViewRowPresenter />
                        </Border>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" 
                                        Value="{StaticResource HoverBorderBrush_Outer}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" 
                                        Value="{StaticResource HoverBorderBrush_Inner}"/>
                            <Setter TargetName="InnerBorder" Property="Background" 
                                        Value="{StaticResource HoverBackgroundBrush}"/>
                        </Trigger>

                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="InnerBorder" Property="Background" 
                                        Value="{StaticResource SelectedBackgroundBrush}"/>
                            <Setter TargetName="InnerBorder" Property="TextBlock.Foreground" 
                                        Value="{StaticResource SelectedForegroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderBrush" 
                                        Value="{StaticResource SelectedBorderBrush_Outer}"/>
                            <Setter TargetName="InnerBorder" Property="BorderBrush" 
                                        Value="{StaticResource SelectedBorderBrush_Inner}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- GridViewColumnHeader ============================================= -->
    
    <Style TargetType="GridViewColumnHeader" x:Key="AlternateGridViewColumnHeader" >
        <Style.Resources>

            <LinearGradientBrush x:Key="HoverBackgroundBrush"
                             StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="#F3F8FD" Offset="0"/>
                <GradientStop Color="#EFF3F9" Offset="1"/>
            </LinearGradientBrush>

            <LinearGradientBrush x:Key="HoverBorderBrush"
                             StartPoint="0,0" EndPoint="0,1">
                <GradientStop Color="#DEE9F7" Offset="0"/>
                <GradientStop Color="#E3E8EE" Offset="1"/>
            </LinearGradientBrush>

        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="GridViewColumnHeader.Role" Value="{x:Static GridViewColumnHeaderRole.Floating}">
                <Setter Property="UIElement.Opacity" Value="0.7"/>
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Canvas Name="PART_FloatingHeaderCanvas" />
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>

            <Trigger Property="GridViewColumnHeader.Role" Value="{x:Static GridViewColumnHeaderRole.Padding}">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="GridViewColumnHeader">
                            <Grid Background="{TemplateBinding Panel.Background}" SnapsToDevicePixels="True">
                                <Border BorderThickness="0,0,0,1" 
                                        BorderBrush="#FFCBC7B8" 
                                        Height="3" VerticalAlignment="Bottom">
                                </Border>
                                <Border BorderThickness="{TemplateBinding Border.BorderThickness}" 
                                        Padding="{TemplateBinding Control.Padding}" 
                                        Margin="1,0,1,0" >
                                    <Border.BorderBrush>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#FFDFEAF7" Offset="0" />
                                            <GradientStop Color="#FFFCFCFC" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.BorderBrush>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="FrameworkElement.Height">
                                    <Trigger.Value>
                                        <s:Double>NaN</s:Double>
                                    </Trigger.Value>
                                    <Setter Property="FrameworkElement.MinHeight" Value="20"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>

        <Setter Property="Control.HorizontalContentAlignment" Value="{x:Static HorizontalAlignment.Center}"/>
        <Setter Property="Control.VerticalContentAlignment"   Value="{x:Static VerticalAlignment.Center}"/>
        <!--<Setter Property="Panel.Background"                   Value="#FFFCFCFC"/>-->
        <Setter Property="Panel.Background"                   Value="Transparent"/>
        <Setter Property="Border.BorderThickness"             Value="1,1,1,1"/>
        <Setter Property="Control.Padding"                    Value="2,0,2,0"/>
        <Setter Property="TextElement.Foreground"             Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="GridViewColumnHeader">
                    <Grid Background="{TemplateBinding Panel.Background}" 
                          SnapsToDevicePixels="True">
                        <!-- Rahmen unten -->
                        <Border BorderThickness="1" SnapsToDevicePixels="True"
                                Name="HighlightBorder">
                            <Border BorderThickness="1" SnapsToDevicePixels="True"
                                    Name="HighlightBorderInner"/>
                        </Border>

                        <!-- Rahmen links/rechts -->
                        <Border BorderThickness="{TemplateBinding Border.BorderThickness}" 
                                Padding="{TemplateBinding Control.Padding}" 
                                Margin="1,0,1,0">
                            <Border.BorderBrush>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Color="#FFDFEAF7" Offset="0" />
                                    <GradientStop Color="#FFFCFCFC" Offset="1" />
                                </LinearGradientBrush>
                            </Border.BorderBrush>
                            <!-- Hier kommt der Header letztlich rein -->
                            <ContentPresenter RecognizesAccessKey="True" 
                                              Content="{TemplateBinding ContentControl.Content}" 
                                              ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                              ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" 
                                              Name="HeaderContent" 
                                              Margin="0,0,0,1" 
                                              HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" 
                                              VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" 
                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                        </Border>

                        <Canvas>
                            <Thumb Name="PART_HeaderGripper">
                                <Thumb.Style>
                                    <Style TargetType="Thumb">
                                        <Setter Property="Canvas.Right" Value="-9"/>
                                        <Setter Property="FrameworkElement.Width" Value="18"/>
                                        <Setter Property="FrameworkElement.Height" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, 
                                                                                                   Path=ActualHeight}"/>
                                        <Setter Property="Control.Padding" Value="0,3,0,4"/>
                                        <Setter Property="Panel.Background" Value="#FFC7C5B2"/>

                                        <Setter Property="Control.Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="Thumb">
                                                    <Border Padding="{TemplateBinding Control.Padding}" 
                                                            Background="#00FFFFFF">
                                                        <!--<DockPanel HorizontalAlignment="Center">
                                                            <Rectangle Fill="{TemplateBinding Panel.Background}" Width="1" />
                                                            <Rectangle Fill="#FFFFFFFF" Width="1" />
                                                        </DockPanel>-->
                                                    </Border>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </Thumb.Style>
                            </Thumb>
                        </Canvas>

                        <!-- Dieses Border füllt das Grid aus und liegt "über" allen anderen -->
                        <Border BorderThickness="1,1,1,1" 
                                Name="HeaderPressBorder" />
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter TargetName="HighlightBorder"    Property="Border.BorderBrush"     Value="{StaticResource HoverBorderBrush}"/>
                            <Setter TargetName="HighlightBorder"    Property="Border.BorderThickness" Value="1,0,1,1"/>
                            <Setter                                 Property="Panel.Background"       Value="{StaticResource HoverBackgroundBrush}"/>
                            <!--<Setter TargetName="PART_HeaderGripper" Property="Panel.Background"       Value="#00FFFFFF"/>-->
                            <!--<Setter                                 Property="Panel.Background"       Value="#FFFAF8F3"/>-->
                        </Trigger>

                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter TargetName="HighlightBorder"    Property="UIElement.Visibility"    Value="{x:Static Visibility.Hidden}"/>
                            <Setter TargetName="PART_HeaderGripper" Property="UIElement.Visibility"    Value="{x:Static Visibility.Hidden}"/>
                            <Setter TargetName="HeaderPressBorder"  Property="Border.BorderBrush"      Value="#FFA5A597"/>
                            <Setter TargetName="HeaderPressBorder"  Property="FrameworkElement.Margin" Value="1,0,0,0"/>
                            <Setter TargetName="HeaderContent"      Property="FrameworkElement.Margin" Value="1,1,0,0"/>
                            <Setter                                 Property="Panel.Background"        Value="#FFDEDFD8"/>
                            <Setter                                 Property="Border.BorderBrush"      Value="#FFDEDFD8"/>
                        </Trigger>

                        <Trigger Property="FrameworkElement.Height">
                            <Trigger.Value>
                                <s:Double>NaN</s:Double>
                            </Trigger.Value>
                            <Setter Property="FrameworkElement.MinHeight" Value="20"/>
                        </Trigger>

                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- TabItem ========================================================== -->

    <Style TargetType="TabItem" x:Key="AlternateTabItem">
        <Style.Resources>
            <SolidColorBrush x:Key="HighlightBorderColor" Color="#79A9D9"/>
            <SolidColorBrush x:Key="HighlightPanelColor" Color="DodgerBlue"/>
        </Style.Resources>

        <!--<Setter Property="Control.Padding" Value="12,2,12,2"/>-->
        <Setter Property="Control.Padding"        Value="12,2,2,2"/>
        <Setter Property="Border.BorderThickness" Value="1,1,1,0"/>
        <Setter Property="Border.BorderBrush"     Value="#FF919B9C"/>
        <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="Panel.Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                    <LinearGradientBrush.GradientStops>
                        <GradientStop Color="#FFFFFFFF" Offset="0" />
                        <GradientStop Color="#FFECEBE6" Offset="1" />
                    </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>

        <Setter Property="Control.HorizontalContentAlignment" Value="{x:Static HorizontalAlignment.Stretch}"/>
        <Setter Property="Control.VerticalContentAlignment" Value="{x:Static VerticalAlignment.Stretch}"/>

        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border SnapsToDevicePixels="True">
                        <Grid Margin="0,0,1,0">
                            <Grid Name="Transform">
                                <Border BorderThickness="{TemplateBinding Border.BorderThickness}" 
                                        CornerRadius="10,3,0,0" 
                                        BorderBrush="{TemplateBinding Border.BorderBrush}" 
                                        Background="{TemplateBinding Panel.Background}" 
                                        Name="Bd" />
                            </Grid>
                            <Border BorderThickness="{TemplateBinding Border.BorderThickness}" 
                                    Padding="{TemplateBinding Control.Padding}">
                                <ContentPresenter RecognizesAccessKey="True" 
                                                  Content="{TemplateBinding HeaderedContentControl.Header}" 
                                                  ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}" 
                                                  ContentStringFormat="{TemplateBinding HeaderedContentControl.HeaderStringFormat}" 
                                                  ContentSource="Header" 
                                                  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" 
                                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
                            </Border>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsMouseOver" Value="True">
                            <Setter Property="Panel.Background" TargetName="Bd">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Color="#FFFFFFFF" Offset="0" />
                                            <GradientStop Color="#FFECEBE6" Offset="1" />
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="Selector.IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Panel.Background" TargetName="Bd" Value="#FFFCFCFE"/>
                        </Trigger>

                        <Trigger Property="TabItem.TabStripPlacement" Value="{x:Static Dock.Bottom}">
                            <Setter Property="FrameworkElement.LayoutTransform" TargetName="Transform">
                                <Setter.Value>
                                    <ScaleTransform ScaleX="1" ScaleY="-1" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="TabItem.TabStripPlacement" Value="{x:Static Dock.Left}">
                            <Setter Property="FrameworkElement.LayoutTransform" TargetName="Transform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="TabItem.TabStripPlacement" Value="{x:Static Dock.Right}">
                            <Setter Property="FrameworkElement.LayoutTransform" TargetName="Transform">
                                <Setter.Value>
                                    <RotateTransform Angle="-90" />
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            <Setter Property="Panel.Background"   TargetName="Bd" Value="#FFF5F4EA"/>
                            <Setter Property="Border.BorderBrush" TargetName="Bd" Value="#FFC9C7BA"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="{x:Static Dock.Top}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,-2,-1" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="{x:Static Dock.Bottom}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,-2,-2" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="{x:Static Dock.Left}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-2,-2,-1,-2" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Selector.IsSelected" Value="True"/>
                                <Condition Property="TabItem.TabStripPlacement" Value="{x:Static Dock.Right}" />
                            </MultiTrigger.Conditions>
                            <Setter Property="FrameworkElement.Margin" Value="-1,-2,-2,-2" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- GroupItem =============================================================================== -->

    <Style TargetType="{x:Type GroupItem}" x:Key="GroupContainerStyle" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupItem}">
                    <Expander IsExpanded="True">
                        <Expander.Header>
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>

                                <TextBlock Margin="0,0,5,0"
                                           Foreground="#1E3287"
                                           FontSize="14"
                                           Text="{Binding Path=Name}"/>
                                <Line Grid.Column="1" 
                                      SnapsToDevicePixels="true"  
                                      X1="0" X2="1" Stretch="Fill"  
                                      Stroke="#E2E2E2" StrokeThickness="1"/>
                            </Grid>
                        </Expander.Header>
                        <ItemsPresenter />
                    </Expander>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Expander ================================================================================ -->

    <Style TargetType="Expander">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Expander">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border" Grid.Row="0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="20" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <ToggleButton Grid.Column="0" 
                                              IsChecked="{Binding Path=IsExpanded,Mode=TwoWay, 
                                                                  RelativeSource={RelativeSource TemplatedParent}}"
                                              OverridesDefaultStyle="True">
                                    <ToggleButton.Template>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Border>
                                                <Path Name="Arrow" Fill="Transparent" Stroke="#A5A5A5"
                                                      HorizontalAlignment="Center" 
                                                      VerticalAlignment="Center"
                                                      Data="M 1 0 L 5 4 L 1 8 Z"/>
                                            </Border>

                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="true">
                                                    <Setter TargetName="Arrow" Property="Data" Value="M 0 5 L 5 0 L 5 5 Z" />
                                                    <Setter TargetName="Arrow" Property="Fill" Value="#595959" />
                                                    <Setter TargetName="Arrow" Property="Stroke" Value="#262626" />
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ToggleButton.Template>
                                </ToggleButton>
                                <ContentPresenter Grid.Column="1" 
                                                  Margin="4" 
                                                  ContentSource="Header" 
                                                  RecognizesAccessKey="True" />
                            </Grid>
                        </Border>

                        <Border Name="Content" 
                                Grid.Row="1" 
                                Background="Transparent" 
                                BorderThickness="0">
                            <ContentPresenter Margin="16,0,0,0" />
                        </Border>
                    </Grid>

                    <!--<ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ContentRow" 
                                    Property="Height" 
                                    Value="{Binding ElementName=Content, Path=DesiredHeight}" />
                        </Trigger>
                    </ControlTemplate.Triggers>-->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Validation styles ======================================================================= -->

    <converter:ErrorContentsConverter x:Key="ErrorContents"/>

    <ControlTemplate x:Key="ValidationTemplate">
        <DockPanel>
            <TextBlock DockPanel.Dock="Left" 
                       Foreground="Red"
                       VerticalAlignment="Center"
                       FontSize="18"
                       FontFamily="Webdings"
                       ToolTip="{Binding Path=/ErrorContent}"
                       Text="i"/>
            <!--ToolTip="{Binding ElementName=adornedElement, Path=(Validation.Errors), Converter={StaticResource ErrorContents}}"-->
            <AdornedElementPlaceholder x:Name="adornedElement"/>
        </DockPanel>
    </ControlTemplate>

    <Style TargetType="TextBox" x:Key="ValidatingTextBox">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>

        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationTemplate}"/>
    </Style>

    <Style TargetType="DatePicker" x:Key="ValidatingDatePicker">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <!--<Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="White"/>-->
            </Trigger>
        </Style.Triggers>

        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationTemplate}"/>
    </Style>

    <Style TargetType="ComboBox" x:Key="ValidatingCombobox">
        <Style.Triggers>
            <Trigger Property="Validation.HasError" Value="true">
                <Setter Property="ToolTip"
                        Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                <!--<Setter Property="Background" Value="Red"/>
                <Setter Property="Foreground" Value="White"/>-->
            </Trigger>
        </Style.Triggers>

        <Setter Property="Validation.ErrorTemplate" Value="{StaticResource ValidationTemplate}"/>
    </Style>

    <Style TargetType="{x:Type controls:ShowCapsLock}">
        <Setter Property="Focusable" Value="False"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type controls:ShowCapsLock}">
                    <Grid>
                        <ContentPresenter Name="Presenter"/>

                        <Popup Placement="Bottom" PlacementTarget="{Binding ElementName=Presenter}" 
                                       IsOpen="{TemplateBinding ShowMessage}">
                            <Border Background="LightGoldenrodYellow" 
                                            BorderThickness="1" BorderBrush="Black"
                                            Padding="2">
                                <TextBlock Text="FESTSTELLTASTE ist gedrückt!"/>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ToolTip" x:Key="MyTooltip">
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <ContentPresenter Margin="4"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Top" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>